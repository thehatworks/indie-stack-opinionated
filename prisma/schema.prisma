datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../app/zod"
  // relationModel         = "default" // Do not export non-relational model.
  // useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
}

model User {
  /// The user's id
  /// @default generated by prisma and cuid()
  id String @id @default(cuid())

  /// User's email address (unique key)
  /// @zod.min(1, "Please Enter an Email Address").email("Please Use a Valid Email Address"),
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// User's password as a foriegn key (traditional)
  password Password?

  /// User's data as a foreign key
  userData UserData?
}

/// This is where to store any extra data about the User not used for Authentication
model UserData {
  /// Unique id for this data
  id String @id @default(cuid())

  /// The actual user object tied to this data
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// id of associated user entry (foreign key)
  userId String @unique

  /// User's associated notes from model Note
  notes Note[]
}

model Password {
  /// bccrypt hash of password
  hash String

  /// Associated User entry
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// id of associated user entry (foreign key)
  userId String @unique
}

model Note {
  /// Unique note id
  /// @default generated by prisma and cuid()
  id String @id @default(cuid())

  /// The note's title
  /// @zod.min(1, "Title is required")
  title String
  /// The note's body text
  /// @zod.min(1, "Body is required")
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// Associated UserData entry
  data   UserData @relation(fields: [dataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// id of associated UserData entry (foreign key)
  dataId String
}
